@model EventSphere.Models.ModelViews.HomeViewModel
@{
    Layout = "~/Areas/Client/Views/Shared/_LayoutClient.cshtml";

    // === Helpers ===
    string ResolveUpload(string? path, string fallback)
    {
        if (string.IsNullOrWhiteSpace(path))
            return Url.Content(fallback);
        if (path.StartsWith("http", StringComparison.OrdinalIgnoreCase))
            return path;
        if (path.Contains("/uploads/", StringComparison.OrdinalIgnoreCase))
            return Url.Content("~" + path.TrimStart('~'));
        return Url.Content("~/uploads/" + path.TrimStart('/'));
    }

    int? ToNullableInt(object? value)
    {
        if (value == null) return null;
        if (value is int i) return i;
        try { return Convert.ToInt32(value); } catch { return null; }
    }

    int ToIntOrZero(object? value) => ToNullableInt(value) ?? 0;

    bool ToBool(object? value, bool defaultValue = false)
    {
        if (value == null) return defaultValue;
        if (value is bool b) return b;
        var s = value.ToString();
        if (bool.TryParse(s, out var bp)) return bp;
        if (int.TryParse(s, out var ip)) return ip != 0;
        return defaultValue;
    }

    string FormatDate(DateOnly? d)
    {
        return d.HasValue ? d.Value.ToString("dd MMM yyyy") : string.Empty;
    }

    string FormatTime(object? t)
    {
        if (t == null) return string.Empty;

        try
        {
            if (t is TimeOnly to) return to.ToString("HH:mm");
            if (t is TimeSpan ts) return TimeOnly.FromTimeSpan(ts).ToString("HH:mm");
            if (t is DateTime dt) return dt.ToString("HH:mm");
            var s = t.ToString() ?? string.Empty;
            if (TimeOnly.TryParse(s, out var p)) return p.ToString("HH:mm");
            if (TimeSpan.TryParse(s, out var pts)) return TimeOnly.FromTimeSpan(pts).ToString("HH:mm");
        }
        catch { }
        return string.Empty;
    }

    var request = ViewContext?.HttpContext?.Request;
    var qQuery = Model?.SearchQuery ?? request?.Query["q"].ToString() ?? string.Empty;
    var departmentQuery = Model?.SelectedDepartment ?? request?.Query["department"].ToString() ?? string.Empty;
    var startQuery = Model?.StartDateStr ?? request?.Query["start"].ToString() ?? string.Empty;
    var endQuery = Model?.EndDateStr ?? request?.Query["end"].ToString() ?? string.Empty;
    var statusQuery = Model?.SelectedStatus ?? request?.Query["status"].ToString() ?? "all";

    int currentPage = Model?.CurrentPage ?? 1;
    int pageSize = Model?.EventsPageSize ?? 6;
    int totalItems = Model?.TotalItems ?? 0;
    int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

    var today = DateOnly.FromDateTime(DateTime.Today);
    var nowTime = TimeOnly.FromDateTime(DateTime.Now);
}
<style>
    /* ===== Event cards ===== */
    .event-card {
        border: 1px solid #e6e6e6;
        overflow: hidden;
        background: #fff;
        transition: transform .12s ease, box-shadow .12s ease;
    }

        .event-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 8px 20px rgba(20,20,40,0.06);
        }

        .event-card .card-img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

    .card-title {
        font-size: 1.6rem;
        font-weight: 700;
        line-height: 1.15;
        margin-bottom: .5rem;
    }

    .seat-badge {
        font-size: 1.05rem;
        padding: .45rem .9rem;
        border-radius: 999px;
        font-weight: 600;
    }

        .seat-badge.small {
            font-size: .95rem;
            padding: .3rem .6rem;
        }

    .event-past {
        opacity: 0.6;
    }


    .event-card .btn-sm {
        min-width: 86px;
    }


    #mediaGrid {
        display: flex;
        flex-wrap: wrap;
        margin-left: -8px;
        margin-right: -8px;
    }

    .media-item {
        padding-left: 8px;
        padding-right: 8px;
        margin-bottom: 16px; 
    }

    /* thumb */
    .gallery-thumb {
        overflow: hidden;
        border-radius: 8px;
        background: #fff;
        display: block;
        position: relative;
        box-shadow: 0 4px 12px rgba(10,10,20,0.03);
    }

        .gallery-thumb img,
        .gallery-thumb video {
            width: 100%;
            height: 220px; 
            object-fit: cover;
            display: block;
        }

    @@media (max-width: 767.98px) {
        .event-card .card-img {
            height: 160px;
        }

        .gallery-thumb img,
        .gallery-thumb video {
            height: 160px;
        }

        .card-title {
            font-size: 1.25rem;
        }

        .seat-badge {
            font-size: 0.95rem;
            padding: .35rem .7rem;
        }
    }

    .row.g-3 > .media-item {
        width: 50%;
    }
    /* default cho col-6 ở mobile */
    @@media (min-width: 768px) {
        .row.g-3 > .media-item.col-md-4 {
            width: 33.3333%;
        }
    }

    @@media (min-width: 992px) {
        .row.g-3 > .media-item.col-lg-3 {
            width: 25%;
        }
    }


    .bg-soft {
        padding-bottom: 2.5rem;
    }


    .es-page-inner {
        max-width: 1100px;
        margin: 0 auto;
    }

    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .pagination .page-link {
        background-color: #ffffff !important;
        color: #0d6efd !important; 
        border: 1px solid #dee2e6 !important;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd !important;
        color: #fff !important;
        border-color: #0d6efd !important;
    }

    .pagination {
        background: rgba(255,255,255,0.9);
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
</style>


<!-- ===== HERO ===== -->
<section class="hero-advanced py-6 text-white">
    <div class="hero-bg"></div>
    <div class="container position-relative z-2 es-page-inner">
        <div class="row align-items-center">
            <div class="col-lg-7">
                <h1 class="display-2 fw-bold mb-3">EventSphere</h1>
                <p class="lead mb-3">Explore – Experience – Connect with outstanding school events</p>

                <!-- FILTER / SEARCH FORM -->
                <form method="get" action="@Url.Action("Index","Home", new { area = "Client" })" class="row g-2 align-items-center">
                    <div class="col-12 col-md-5">
                        <input type="search" name="q" value="@qQuery" class="form-control form-control-lg"
                               placeholder="Keywords, titles, locations...">
                    </div>

                    <div class="col-12 col-md-3">
                        <select name="department" class="form-select form-select-lg">
                            <option value="">Tất cả khoa</option>
                            @if (Model?.Departments != null)
                            {
                                foreach (var d in Model.Departments)
                                {
                                    <option value="@d.Key" @(departmentQuery == d.Key ? "selected" : "")>@d.Value</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-6 col-md-2">
                        <input type="date" name="start" value="@startQuery" class="form-control form-control-lg" />
                    </div>
                    <div class="col-6 col-md-2">
                        <input type="date" name="end" value="@endQuery" class="form-control form-control-lg" />
                    </div>

                    <div class="col-12 col-md-3 mt-2">
                        <select name="status" class="form-select">
                            <option value="all" @(statusQuery == "all" ? "selected" : "")>All statuses</option>
                            <option value="upcoming" @(statusQuery == "upcoming" ? "selected" : "")>Coming soon</option>
                            <option value="ongoing" @(statusQuery == "ongoing" ? "selected" : "")>In progress</option>
                            <option value="past" @(statusQuery == "past" ? "selected" : "")>Past</option>
                        </select>
                    </div>

                    <div class="col-12 col-md-3 d-flex gap-2 mt-2">
                        <button type="submit" class="btn btn-cta btn-lg w-100">Search</button>
                    </div>
                </form>
            </div>

            <div class="col-lg-5 d-none d-lg-block">
                <div class="hero-card p-4 rounded-3 shadow-lg">
                    <h5 class="mb-3">Upcoming Events</h5>
                    <ul class="list-unstyled mb-0 small text-muted">
                        @{

                            var upcoming = (Model?.UpcomingEvents
                            ?? Enumerable.Empty<EventSphere.Models.ModelViews.HomeViewModel.EventBriefDto>())
                            .Where(ev => ev.Date.HasValue && ev.Date.Value >= today)
                            .OrderBy(ev => ev.Date.Value)
                            .Take(4);
                        }
                        @foreach (var e in upcoming)
                        {
                            var imgSmall = ResolveUpload(e.Image, "~/Client/images/default-event.jpg");
                            var dateSmall = FormatDate(e.Date);

                            <li class="d-flex align-items-center mb-3">
                                <img src="@imgSmall" class="rounded me-3" style="width:64px;height:64px;object-fit:cover;" alt="@e.Title" />
                                <div class="flex-grow-1">
                                    <div class="fw-semibold text-primary">@e.Title</div>
                                    <div class="text-muted">@dateSmall • @e.Venue</div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- ===== EVENTS ===== -->
<section class="container my-5">
    <h2 class="fw-bold mb-4">Event</h2>
    <div class="row g-4">
        @foreach (var e in Model?.UpcomingEvents ?? Enumerable.Empty<EventSphere.Models.ModelViews.HomeViewModel.EventBriefDto>())
        {
            var img = ResolveUpload(e.Image, "~/Client/images/default-event.jpg");
            var date = FormatDate(e.Date);
            var time = FormatTime(e.Time);

            int? seatsLeft = ToNullableInt(e.SeatsAvailable);
            var isFull = (seatsLeft ?? 0) <= 0;
            var waitlist = ToBool(e.IsWaitlistEnabled, false);
            var approved = ToBool(e.IsApproved, true);

            bool isPast = false;
            if (e.Date.HasValue)
            {
                if (e.Date.Value < today) isPast = true;
                else if (e.Date.Value == today && e.Time.HasValue && e.Time.Value < nowTime) isPast = true;
            }

            <div class="col-12 col-md-6 col-lg-4">
                <article class="card h-100 border shadow-sm rounded-3 event-card @(isPast ? "event-past" : "")">
                    <div class="overflow-hidden rounded-top">
                        <img src="@img" alt="@e.Title" class="card-img" />
                    </div>
                    <div class="card-body d-flex flex-column p-3">
                        <h5 class="card-title">@e.Title</h5>
                        <p class="text-muted mb-2">
                            <i class="bi bi-calendar-event me-1"></i> @date
                            @if (!string.IsNullOrEmpty(time))
                            {
                                <span> • <i class="bi bi-clock"></i> @time</span>
                            }
                        </p>
                        <p class="text-muted mb-2"><i class="bi bi-geo-alt me-1"></i>@e.Venue</p>

                        <div class="mt-3 d-flex align-items-center justify-content-between">
                            <div>
                                @if (isPast)
                                {
                                    <span class="seat-badge bg-secondary text-white small">Past events</span>
                                }
                                else if (!approved)
                                {
                                    <span class="seat-badge bg-secondary text-white small">Not approved</span>
                                }
                                else if (isFull)
                                {
                                    <span class="seat-badge bg-danger text-white small">Full</span>
                                }
                                else if (seatsLeft.HasValue)
                                {
                                    if (seatsLeft.Value > 10)
                                    {
                                        <span class="seat-badge bg-success text-white small"> @seatsLeft.Value seat</span>
                                    }
                                    else if (seatsLeft.Value > 0)
                                    {
                                        <span class="seat-badge bg-warning text-dark small"> @seatsLeft.Value seat</span>
                                    }
                                    else
                                    {
                                        <span class="seat-badge bg-danger text-white small">Full</span>
                                    }
                                }
                                else
                                {
                                    <span class="seat-badge bg-success text-white small">Available</span>
                                }
                            </div>
                            <div>
                                <a href="@Url.Action("Index", "EventDetail", new{id = e.EventId, area = "Client"})"
                                   class="btn btn-sm btn-primary mt-3">
                                    Detail
                                </a>
                            </div>
                        </div>
                    </div>
                </article>
            </div>
        }
    </div>
</section>

<!-- ===== PAGINATION ===== -->
@if (totalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination pagination-lg justify-content-center bg-light p-3 rounded shadow-sm">
            <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index","Home", new { area="Client", q = qQuery, department = departmentQuery, status = statusQuery, start = startQuery, end = endQuery, page = currentPage - 1, pageSize = pageSize })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @{
                var startPage = Math.Max(1, currentPage - 3);
                var endPage = Math.Min(totalPages, currentPage + 3);
                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index","Home", new { area="Client", q = qQuery, department = departmentQuery, status = statusQuery, start = startQuery, end = endQuery, page = i, pageSize = pageSize })">@i</a>
                    </li>
                }
            }

            <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index","Home", new { area="Client", q = qQuery, department = departmentQuery, status = statusQuery, start = startQuery, end = endQuery, page = currentPage + 1, pageSize = pageSize })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

<!-- ===== MEDIA GALLERY ===== -->
<section class="bg-soft py-5 mt-5">
    <div class="container es-page-inner">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="fw-bold display-6 mb-0">Image & Video Library</h2>
                <p class="text-muted mb-0">Moments shared by the community</p>
            </div>
        </div>

        <div class="row g-3" id="mediaGrid">
            @foreach (var m in (Model?.LatestMedia ?? Enumerable.Empty<dynamic>()))
            {
                var src = ResolveUpload(m.FileUrl, "~/Client/images/no-image.jpg");
                var isVideo = src.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase)
                || src.EndsWith(".webm", StringComparison.OrdinalIgnoreCase)
                || src.EndsWith(".ogg", StringComparison.OrdinalIgnoreCase);

                <div class="media-item col-6 col-md-4 col-lg-3">
                    <div class="gallery-thumb shadow-sm rounded overflow-hidden">
                        @if (isVideo)
                        {
                            <div class="ratio ratio-16x9 bg-black position-relative" style="height:220px;">
                                <video muted playsinline preload="metadata" style="width:100%;height:100%;object-fit:cover;" poster="@Url.Content("~/Client/images/video-poster.jpg")">
                                    <source src="@src">
                                </video>
                            </div>
                        }
                        else
                        {
                            <img src="@src" loading="lazy" alt="@m.Caption" />
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</section>
