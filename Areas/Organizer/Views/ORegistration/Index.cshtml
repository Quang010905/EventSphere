@{
    Layout = "~/Areas/Organizer/Views/Shared/_LayoutOrganizer.cshtml";
    var ls = ViewBag.listReg as List<EventSphere.Models.ModelViews.RegistrationView>;
}
    <main>
        <div class="container-fluid px-4">
            <h1 class="mt-4">Registrations</h1>
            @Html.AntiForgeryToken()

            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-table me-1"></i> Registration List
                </div>
                <div class="card-body">
                    <table id="datatablesSimple" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Student</th>
                                <th>Event</th>
                                <th>Status</th>
                                <th>Register On</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ls != null)
                            {
                                int i = 1;
                                foreach (var item in ls)
                                {
                                    <tr data-id="@item.Id">
                                        <td>@i</td>
                                        <td>@item.StudentEmail</td>
                                        <td>@item.EventName</td>
                                        <td class="col-status">
                                            @(item.Status == 0 ? "Pending" :
                                                item.Status == 1 ? "Accepted" : "Denied")
                                        </td>
                                        <td>@item.RegisterOn</td>
                                        <td class="col-action">
                                            @if (item.Status == 0)
                                            {
                                                <button class="btn btn-success btn-sm btn-accept" data-id="@item.Id">Accept</button>
                                                <button class="btn btn-danger btn-sm btn-deny" data-id="@item.Id">Deny</button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-secondary btn-sm" disabled>
                                                    @(item.Status == 1 ? "Accepted" : "Denied")
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                    i++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        (function () {
            // đảm bảo không bind handler nhiều lần
            $(document).off('click', '.btn-accept').on('click', '.btn-accept', function (e) {
                e.preventDefault();

                const $btn = $(this);
                const id = $btn.data('id');
                const $row = $btn.closest('tr');
                const $deny = $row.find('.btn-deny');

                // nếu đang gửi request thì ignore
                if ($btn.data('sending')) return;

                // lấy token antiforgery (phải có @Html.AntiForgeryToken() đâu đó trên page)
                const token = $('input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    alert('Không tìm thấy __RequestVerificationToken trên trang. Vui lòng đảm bảo đã render @Html.AntiForgeryToken().');
                    return;
                }

                // disable và show loading
                $btn.data('sending', true);
                $btn.prop('disabled', true);
                $deny.prop('disabled', true);

                // optional: show spinner trong button
                const origHtml = $btn.html();
                $btn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý');

                // gửi POST với data form (đảm bảo server dễ lấy token)
                $.ajax({
                    url: '/Organizer/ORegistration/ApproveAndSend', // POST endpoint
                    type: 'POST',
                    data: {
                        id: id,
                        __RequestVerificationToken: token
                    },
                            success: function (res) {
            if (res && res.success) {
                // Hiện thông báo; alert() ở đây là blocking — code phía dưới sẽ chạy sau khi user bấm OK
                alert(res.message || 'Thao tác thành công.');

                // 1) Nếu đang dùng DataTable (ajax) thì reload table (giữ paging)
                try {
                    if (window.jQuery && $.fn.dataTable) {
                        var table = $('#datatablesSimple').DataTable ? $('#datatablesSimple').DataTable() : null;
                        if (table && typeof table.ajax !== 'undefined' && typeof table.ajax.reload === 'function') {
                            table.ajax.reload(null, false); // giữ trang hiện tại
                            return; // đã reload xong, thoát handler
                        }
                    }
                } catch (e) {
                    console.warn('DataTable reload error', e);
                }

                // 2) Nếu không có DataTable: đơn giản reload cả trang để đồng bộ (bạn có thể thay bằng cập nhật DOM 1 row nếu muốn)
                location.reload();
            } else {
                alert(res?.message || 'Không thể hoàn tất thao tác: server trả lỗi.');
                // bật lại nút để admin có thể thử lại
                $btn.prop('disabled', false);
                $deny.prop('disabled', false);
                $btn.data('sending', false);
                $btn.html(origHtml);

                try { if (window.jQuery && $.fn.dataTable) { var t = $('#datatablesSimple').DataTable ? $('#datatablesSimple').DataTable() : null; if (t && t.ajax) t.ajax.reload(null, false); } } catch (e) { }
            }
        },
                    error: function (xhr, status, err) {
                        // debug: show status and server response
                        var msg = 'Server error';
                        try {
                            if (xhr && xhr.responseJSON && xhr.responseJSON.message) msg = xhr.responseJSON.message;
                            else if (xhr && xhr.responseText) msg = xhr.responseText;
                        } catch (e) { }

                        alert('Lỗi khi gửi yêu cầu: ' + msg);
                        $btn.prop('disabled', false);
                        $deny.prop('disabled', false);
                        $btn.data('sending', false);
                        $btn.html(origHtml);

                        // nếu muốn, reload page làm fallback:
                        // location.reload();
                    }
                });
            });

            // Deny - tương tự
            $(document).off('click', '.btn-deny').on('click', '.btn-deny', function (e) {
                e.preventDefault();
                if (!confirm('Bạn có chắc chắn muốn từ chối?')) return;

                const $btn = $(this);
                const id = $btn.data('id');
                const $row = $btn.closest('tr');
                const $accept = $row.find('.btn-accept');

                if ($btn.data('sending')) return;

                const token = $('input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    alert('Không tìm thấy __RequestVerificationToken trên trang.');
                    return;
                }

                $btn.data('sending', true);
                $btn.prop('disabled', true);
                $accept.prop('disabled', true);
                const origHtml = $btn.html();
                $btn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý');

                $.ajax({
                    url: '/Organizer/ORegistration/Deny',
                    type: 'POST',
                    data: {
                        id: id,
                        __RequestVerificationToken: token
                    },
                    success: function (res) {
                        if (res && res.success) {
                            try {
                                if (window.jQuery && $.fn.dataTable) {
                                    var table = $('#datatablesSimple').DataTable ? $('#datatablesSimple').DataTable() : null;
                                    if (table && typeof table.ajax !== 'undefined' && typeof table.ajax.reload === 'function') {
                                        table.ajax.reload(null, false);
                                        return;
                                    }
                                }
                            } catch (e) { console.warn(e); }

                            $row.find('.col-status').html('<span class="text-danger">Denied</span>');
                            $row.find('.col-action').html('<button class="btn btn-secondary btn-sm" disabled>Denied</button>');
                            alert(res.message || 'Đã từ chối.');
                        } else {
                            alert(res?.message || 'Không thể từ chối: server trả lỗi.');
                            $btn.prop('disabled', false);
                            $accept.prop('disabled', false);
                            $btn.data('sending', false);
                            $btn.html(origHtml);
                            try { if (window.jQuery && $.fn.dataTable) { var t = $('#datatablesSimple').DataTable ? $('#datatablesSimple').DataTable() : null; if (t && t.ajax) t.ajax.reload(null, false); } } catch (e) { }
                        }
                    },
                    error: function (xhr) {
                        var msg = 'Server error';
                        try {
                            if (xhr && xhr.responseJSON && xhr.responseJSON.message) msg = xhr.responseJSON.message;
                            else if (xhr && xhr.responseText) msg = xhr.responseText;
                        } catch (e) { }
                        alert('Lỗi khi gửi yêu cầu: ' + msg);
                        $btn.prop('disabled', false);
                        $accept.prop('disabled', false);
                        $btn.data('sending', false);
                        $btn.html(origHtml);
                    }
                });
            });

        })();
    </script>
}

