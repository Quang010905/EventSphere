@model EventSphere.Repositories.EventWithSeatingDto
@{
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Seating for " + Model.Title;
}

<h2 class="mb-3">Seating — @Model.Title</h2>

<div class="mb-3 d-flex flex-column flex-sm-row gap-2 align-items-sm-center">
    <div class="p-3 rounded shadow-sm bg-white">
        <div class="small text-muted">Date</div>
        <div class="fw-bold">@Model.Date.ToString("yyyy-MM-dd")</div>
    </div>

    <div class="p-3 rounded shadow-sm bg-white">
        <div class="small text-muted">Time</div>
        <div class="fw-bold">@Model.Time.ToString(@"hh\:mm")</div>
    </div>

    <div class="p-3 rounded shadow-sm bg-white text-center">
        <div class="small text-muted">Total seats</div>
        <div class="display-6 fw-bold text-primary" id="totalSeats">@Model.TotalSeats</div>
    </div>

    <div class="p-3 rounded shadow-sm bg-white text-center">
        <div class="small text-muted">Booked</div>
        <div class="display-6 fw-bold text-danger" id="bookedSeats">@Model.SeatsBooked</div>
    </div>

    <div class="p-3 rounded shadow-sm bg-white text-center">
        <div class="small text-muted">Available</div>
        <div class="display-6 fw-bold text-success" id="availableSeats">@Model.SeatsAvailable</div>
    </div>
</div>

<!-- Antiforgery token (we will read it in JS) -->
<div id="af-token" style="display:none">
    @Html.AntiForgeryToken()
</div>

<div class="mb-3">
    <button id="btnAddSeat" class="btn btn-primary me-2" data-eventid="@Model.EventId">Add seat (+1)</button>
    <a class="btn btn-secondary" href="@Url.Action("Index")">Back to events</a>
</div>

<hr />

<!-- Legend -->
<div class="mb-3">
    <span class="me-3 align-middle">
        <span style="display:inline-block;width:18px;height:18px;background:#dc3545;border-radius:3px;margin-right:6px;vertical-align:middle;"></span>
        <span class="small">Booked</span>
    </span>
    <span class="me-3 align-middle">
        <span style="display:inline-block;width:18px;height:18px;background:#f1f3f5;border:1px solid #ddd;border-radius:3px;margin-right:6px;vertical-align:middle;"></span>
        <span class="small">Available</span>
    </span>
</div>

<style>
    .seat-grid {
        display: grid;
        gap: 10px;
        grid-template-columns: repeat(auto-fit, minmax(72px, 1fr));
    }

    .seat {
        height: 72px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 0.95rem;
        border: 1px solid #ddd;
        user-select: none;
    }

        .seat.booked {
            background: #dc3545;
            color: white;
            border-color: #c82333;
        }

        .seat.available {
            background: #f1f3f5;
            color: #212529;
        }

    @@media(min - width:1200px) {
        .seat-grid

    {
        grid-template-columns: repeat(10, 1fr);
    }

    }
</style>

<div id="seatContainer">
    @if (Model.TotalSeats <= 0)
    {
        <div class="alert alert-info">Chưa có chỗ ngồi nào được thiết lập cho sự kiện này.</div>
    }
    else
    {
        <div class="seat-grid" id="seatGrid">
            @{
                int total = Model.TotalSeats;
                int booked = Model.SeatsBooked;
                for (int i = 1; i <= total; i++)
                {
                    bool isBooked = i <= booked;
                    string cls = isBooked ? "seat booked" : "seat available";
                    <div class="@cls">Seat @i</div>
                }
            }
        </div>
    }
</div>

@section scripts {
    <script>
        (function(){
            const btn = document.getElementById('btnAddSeat');
            if (!btn) return;

            btn.addEventListener('click', async function (e) {
                e.preventDefault();
                const eventId = this.dataset.eventid;
                // get antiforgery token value
                const tokenInput = document.querySelector('#af-token input[name="__RequestVerificationToken"]');
                const token = tokenInput ? tokenInput.value : null;

                if (!token) {
                    alert('Không tìm thấy antiforgery token.');
                    return;
                }

                // prepare form data
                const fd = new FormData();
                fd.append('eventId', eventId);
                fd.append('__RequestVerificationToken', token);

                this.disabled = true;
                this.textContent = 'Adding...';

                try {
                    const resp = await fetch('@Url.Action("AddSeat", "EventSeating", new { area = "Admin" })', {
                        method: 'POST',
                        body: fd,
                        credentials: 'same-origin'
                    });

                    if (!resp.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const data = await resp.json();
                    if (data && data.success) {
                        // reload simple: update counts and grid by reloading the seating fragment via fetch (or just refresh the page)
                        // simpler approach: reload page so server returns fresh seating
                        location.reload();
                    } else {
                        alert(data?.message ?? 'Không thể thêm chỗ. Kiểm tra console/server logs.');
                        this.disabled = false;
                        this.textContent = 'Add seat (+1)';
                    }
                } catch (err) {
                    console.error(err);
                    alert('Lỗi khi gọi server: ' + err.message);
                    this.disabled = false;
                    this.textContent = 'Add seat (+1)';
                }
            });
        })();
    </script>
}
